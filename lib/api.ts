const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";
import type { paths } from "./../lib/schema"; // generated by openapi-typescript
import createClient from "openapi-fetch";

const client = createClient<paths>({ baseUrl: API_URL });

export const api = {
  concertSeasons: {
    getById: async ({
      id,
    }: paths["/api/ConcertSeasons/{id}"]["get"]["parameters"]["path"]) => {
      const { data, error } = await client.GET("/api/ConcertSeasons/{id}", {
        params: {
          path: { id },
        },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    getAll: async (
      query: paths["/api/Concerts"]["get"]["parameters"]["query"]
    ) => {
      const { data, error } = await client.GET("/api/ConcertSeasons", {
        params: { query },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    concerts: async ({
      path: { id },
      query,
    }: paths["/api/ConcertSeasons/{id}/concerts"]["get"]["parameters"]) => {
      const { data, error } = await client.GET(
        "/api/ConcertSeasons/{id}/concerts",
        {
          params: {
            path: { id },
            query,
          },
        }
      );
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
  },
  composers: {
    getById: async ({
      id,
    }: paths["/api/Composers/{id}"]["get"]["parameters"]["path"]) => {
      const { data, error } = await client.GET("/api/Composers/{id}", {
        params: {
          path: { id },
        },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    getAll: async (
      query: paths["/api/Concerts"]["get"]["parameters"]["query"]
    ) => {
      const { data, error } = await client.GET("/api/Composers", {
        params: { query },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    concerts: {
      getById: async ({
        path: { id },
        query,
      }: paths["/api/Composers/{id}/concerts"]["get"]["parameters"]) => {
        const { data, error } = await client.GET(
          "/api/Composers/{id}/concerts",
          {
            params: {
              path: { id },
              query,
            },
          }
        );
        if (error) {
          console.log({ error });
          throw new Error(error);
        }
        return data;
      },
    },
  },
  performers: {
    getById: async ({
      id,
    }: paths["/api/Performers/{id}"]["get"]["parameters"]["path"]) => {
      const { data, error } = await client.GET("/api/Performers/{id}", {
        params: {
          path: { id },
        },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    getAll: async (
      query: paths["/api/Concerts"]["get"]["parameters"]["query"]
    ) => {
      const { data, error } = await client.GET("/api/Performers", {
        params: { query },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    concerts: async ({
      path: { id },
      query,
    }: paths["/api/Performers/{id}/concerts"]["get"]["parameters"]) => {
      const { data, error } = await client.GET(
        "/api/Performers/{id}/concerts",
        {
          params: {
            path: { id },
            query,
          },
        }
      );
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
  },
  pieces: {
    getById: async ({
      id,
    }: paths["/api/Pieces/{id}"]["get"]["parameters"]["path"]) => {
      const { data, error } = await client.GET("/api/Pieces/{id}", {
        params: {
          path: { id },
        },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    getAll: async (
      query: paths["/api/Concerts"]["get"]["parameters"]["query"]
    ) => {
      const { data, error } = await client.GET("/api/Pieces", {
        params: { query },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    concerts: async ({
      path: { id },
      query,
    }: paths["/api/Pieces/{id}/concerts"]["get"]["parameters"]) => {
      const { data, error } = await client.GET("/api/Pieces/{id}/concerts", {
        params: {
          path: { id },
          query,
        },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
  },
  concerts: {
    getById: async ({
      id,
    }: paths["/api/Concerts/{id}"]["get"]["parameters"]["path"]) => {
      const { data, error } = await client.GET("/api/Concerts/{id}", {
        params: {
          path: { id },
        },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
    getAll: async (
      query: paths["/api/Concerts"]["get"]["parameters"]["query"]
    ) => {
      const { data, error } = await client.GET("/api/Concerts", {
        params: { query },
      });
      if (error) {
        console.log({ error });
        throw new Error(error);
      }
      return data;
    },
  },
};
